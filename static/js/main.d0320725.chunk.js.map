{"version":3,"sources":["components/Controls/Controls.jsx","components/Balance/Balance.jsx","components/TransactionHistory/TransactionHistory.jsx","components/helpers/localStorege.jsx","components/Dashboard.jsx","index.jsx"],"names":["Controls","state","amount","handeleChange","e","setState","currentTarget","value","reset","handleDeposit","Number","toast","props","onDeposit","handeWithdraw","balance","onWithdraw","className","type","name","this","onChange","onClick","Component","Balance","income","expenses","role","aria-labelledby","TransactionHistory","items","map","item","key","id","date","localStorage","setItem","JSON","stringify","err","console","log","transactions","getItem","parse","Dashboard","findSumByType","filter","el","reduce","count","prevState","shortid","generate","Date","toLocaleString","handleWithdraw","storage","prevProps","length","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d0320725.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport T from 'prop-types';\r\nimport './Controls.module.css';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default class Controls extends Component {\r\n  static propTypes = {\r\n    balance: T.number.isRequired,\r\n    onDeposit: T.func.isRequired,\r\n    onWithdraw: T.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    amount: '',\r\n  };\r\n\r\n  handeleChange = e => {\r\n    this.setState({\r\n      amount: e.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  reset = () => this.setState({ amount: '' });\r\n\r\n  handleDeposit = () => {\r\n    if (Number(this.state.amount) === 0) {\r\n      toast('Введите сумму для проведения операции!');\r\n    } else if (Number(this.state.amount) > 0) {\r\n      this.props.onDeposit(Number(this.state.amount));\r\n      this.reset();\r\n    } else {\r\n      toast('Введите положительное число!');\r\n    }\r\n  };\r\n\r\n  handeWithdraw = () => {\r\n    if (Number(this.state.amount) === 0) {\r\n      toast('Введите сумму для проведения операции!');\r\n    } else if (this.state.amount > this.props.balance) {\r\n      toast('На счету недостаточно средств для проведения операции!');\r\n    } else if (Number(this.state.amount) > 0) {\r\n      this.props.onWithdraw(Number(this.state.amount));\r\n      this.reset();\r\n    } else {\r\n      toast('Введите положительное число!');\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"controls\">\r\n        <input\r\n          type=\"number\"\r\n          name=\"amount\"\r\n          value={this.state.amount}\r\n          onChange={this.handeleChange}\r\n        />\r\n        <button type=\"button\" onClick={this.handleDeposit}>\r\n          Deposit\r\n        </button>\r\n        <ToastContainer />\r\n        <button type=\"button\" onClick={this.handeWithdraw}>\r\n          Withdraw\r\n        </button>\r\n        <ToastContainer />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Balance = ({ balance, income, expenses }) => (\r\n  <section className=\"balance\">\r\n    <span role=\"img\" aria-labelledby=\"arrow1\">\r\n      ⬆️{income}$\r\n    </span>\r\n    <span role=\"img\" aria-labelledby=\"arrow2\">\r\n      ⬇️{expenses}$\r\n    </span>\r\n    <span>Balance: {balance}$</span>\r\n  </section>\r\n);\r\n\r\nexport default Balance;\r\n","import React from 'react';\r\nimport './TransactionHistory.module.css';\r\n\r\nconst TransactionHistory = ({ items }) => (\r\n  <table className=\"history\">\r\n    <thead>\r\n      <tr>\r\n        <th>Transaction</th>\r\n        <th>Amount</th>\r\n        <th>Date</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      {items.map(item => (\r\n        <tr key={item.id}>\r\n          <td>{item.type}</td>\r\n          <td>{item.amount}$</td>\r\n          <td>{item.date}</td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  </table>\r\n);\r\n\r\nexport default TransactionHistory;\r\n","const save = (key, value) => {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nconst get = key => {\r\n  try {\r\n    const transactions = localStorage.getItem(key);\r\n\r\n    return transactions ? JSON.parse(transactions) : null;\r\n  } catch (e) {\r\n    console.log('err');\r\n  }\r\n\r\n  return null;\r\n};\r\nexport default { save, get };\r\n","import React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport './Dashboard.module.css';\r\nimport Controls from './Controls/Controls';\r\nimport Balance from './Balance/Balance';\r\nimport TransactionHistory from './TransactionHistory/TransactionHistory';\r\nimport storage from './helpers/localStorege';\r\n\r\nexport default class Dashboard extends Component {\r\n  state = {\r\n    transactions: [],\r\n    balance: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const transactions = storage.get('transactions');\r\n    const balance = storage.get('balance');\r\n\r\n    if (transactions && balance) {\r\n      this.setState({ transactions, balance });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { transactions, balance } = this.state;\r\n\r\n    if (prevState.transactions !== transactions) {\r\n      storage.save('transactions', transactions);\r\n    }\r\n\r\n    if (prevState.balance !== balance) {\r\n      storage.save('balance', balance);\r\n    }\r\n  }\r\n\r\n  findSumByType = type => {\r\n    const arrayOfDeposits = this.state.transactions.filter(\r\n      el => el.type === type,\r\n    );\r\n    return arrayOfDeposits.reduce((count, el) => (count += el.amount), 0);\r\n  };\r\n\r\n  handleDeposit = amount => {\r\n    this.setState(prevState => ({\r\n      transactions: [\r\n        ...prevState.transactions,\r\n        {\r\n          id: shortid.generate(),\r\n          type: 'deposit',\r\n          amount,\r\n          date: new Date().toLocaleString(),\r\n        },\r\n      ],\r\n      balance: prevState.balance + amount,\r\n    }));\r\n  };\r\n\r\n  handleWithdraw = amount => {\r\n    this.setState(prevState => ({\r\n      transactions: [\r\n        ...prevState.transactions,\r\n        {\r\n          id: shortid.generate(),\r\n          type: 'withdraw',\r\n          amount,\r\n          date: new Date().toLocaleString(),\r\n        },\r\n      ],\r\n      balance: prevState.balance - amount,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"dashboard\">\r\n        <Controls\r\n          onDeposit={this.handleDeposit}\r\n          onWithdraw={this.handleWithdraw}\r\n          balance={this.state.balance}\r\n        />\r\n\r\n        <Balance\r\n          balance={this.state.balance}\r\n          income={this.findSumByType('deposit')}\r\n          expenses={this.findSumByType('withdraw')}\r\n        />\r\n\r\n        {this.state.transactions.length > 0 && (\r\n          <TransactionHistory items={this.state.transactions} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Dashboard from './components/Dashboard';\r\n\r\nReactDOM.render(<Dashboard />, document.querySelector('#root'));\r\n"],"sourceRoot":""}